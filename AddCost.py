# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'AddCost.ui'
#
# Created by: PyQt5 UI code generator 5.15.8
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from datetime import datetime
from dateutil.relativedelta import relativedelta
import mysql.connector


mydb = mysql.connector.connect(
  host="localhost",
  user="root",
  password="root",
  database="mobile_shop"
)

class Ui_Dialog(object):
    
    def Id(self):
         date = str(self.dateTimeEdit_2.dateTime())[23:][:-1]
         timeData = date.split(", ")
         yer = list(timeData[0])
         yer.pop(1)
         preId = "".join(yer) + "{:02d}".format(int(timeData[1])) + "{:02d}".format(int(timeData[2]))
         
         mydb.reconnect()
         mycursor = mydb.cursor()
         sql = "SELECT c_id FROM cost WHERE c_id LIKE '{}%' ORDER BY c_id DESC".format(preId)
         mycursor.execute(sql)
         myresult = mycursor.fetchall()
         mydb.reconnect()
         
         if myresult:
             myresult = list(str(myresult[0][0]))
             rnn = int("".join(myresult[7:]))
             rnn = rnn +1
             rnn = list(str(rnn))
             print(rnn)
             myresult = myresult[:7]
             for e in rnn:
                 myresult.append(e)
             print(myresult)
             recetIdF = int("".join(myresult))
             
         else:
             recetIdF = preId + "1"    
         
         self.label_2.setText("Id : "+str(recetIdF))
         
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(1280, 720)
        font = QtGui.QFont()
        font.setPointSize(10)
        Dialog.setFont(font)
        self.listWidget = QtWidgets.QListWidget(Dialog)
        self.listWidget.setGeometry(QtCore.QRect(10, 20, 1261, 371))
        self.listWidget.setObjectName("listWidget")
        self.layoutWidget = QtWidgets.QWidget(Dialog)
        self.layoutWidget.setGeometry(QtCore.QRect(10, 400, 1261, 171))
        self.layoutWidget.setObjectName("layoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.layoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.lineEdit_Id = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit_Id.setFont(font)
        self.lineEdit_Id.setText("")
        self.lineEdit_Id.setObjectName("lineEdit_Id")
        self.gridLayout.addWidget(self.lineEdit_Id, 2, 0, 1, 1)
        self.label_13 = QtWidgets.QLabel(self.layoutWidget)
        self.label_13.setAlignment(QtCore.Qt.AlignCenter)
        self.label_13.setObjectName("label_13")
        self.gridLayout.addWidget(self.label_13, 3, 6, 1, 1)
        self.label_11 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        self.gridLayout.addWidget(self.label_11, 1, 6, 1, 1)
        self.dateTimeEdit = QtWidgets.QDateTimeEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.dateTimeEdit.setFont(font)
        self.dateTimeEdit.setObjectName("dateTimeEdit")
        self.gridLayout.addWidget(self.dateTimeEdit, 2, 6, 1, 1)
        self.dateTimeEdit_2 = QtWidgets.QDateTimeEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.dateTimeEdit_2.setFont(font)
        self.dateTimeEdit_2.setObjectName("dateTimeEdit_2")
        self.gridLayout.addWidget(self.dateTimeEdit_2, 4, 6, 1, 1)
        self.label = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 3, 0, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 1, 0, 1, 1)
        self.lineEdit_Much = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit_Much.setFont(font)
        self.lineEdit_Much.setObjectName("lineEdit_Much")
        self.gridLayout.addWidget(self.lineEdit_Much, 2, 3, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 1, 3, 1, 1)
        self.lineEdit_Name = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit_Name.setFont(font)
        self.lineEdit_Name.setMaxLength(510)
        self.lineEdit_Name.setObjectName("lineEdit_Name")
        self.gridLayout.addWidget(self.lineEdit_Name, 4, 0, 1, 4)
        self.layoutWidget1 = QtWidgets.QWidget(Dialog)
        self.layoutWidget1.setGeometry(QtCore.QRect(20, 630, 1201, 71))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.layoutWidget1)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton_Search = QtWidgets.QPushButton(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(15)
        self.pushButton_Search.setFont(font)
        self.pushButton_Search.setObjectName("pushButton_Search")
        self.horizontalLayout.addWidget(self.pushButton_Search)
        self.pushButton_Add = QtWidgets.QPushButton(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(15)
        self.pushButton_Add.setFont(font)
        self.pushButton_Add.setObjectName("pushButton_Add")
        self.horizontalLayout.addWidget(self.pushButton_Add)
        self.pushButton_Edit = QtWidgets.QPushButton(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(15)
        self.pushButton_Edit.setFont(font)
        self.pushButton_Edit.setObjectName("pushButton_Edit")
        self.horizontalLayout.addWidget(self.pushButton_Edit)
        self.pushButton_Remove = QtWidgets.QPushButton(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(15)
        self.pushButton_Remove.setFont(font)
        self.pushButton_Remove.setObjectName("pushButton_Remove")
        self.horizontalLayout.addWidget(self.pushButton_Remove)
        
        yearBefore = datetime.now() - relativedelta(months=1)
        self.dateTimeEdit.setDateTime(yearBefore)
        dayBefore = datetime.now()
        self.dateTimeEdit_2.setDateTime(dayBefore)
        
        self.dateTimeEdit_2.dateTimeChanged.connect(self.Id)
        
        self.pushButton_Search.clicked.connect(self.Search)
        self.listWidget.itemClicked.connect(self.Select)
        self.pushButton_Edit.clicked.connect(self.Edit)
        self.pushButton_Add.clicked.connect(lambda: self.Edit(1))
        self.pushButton_Remove.clicked.connect(self.Remove)
        
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Add or Edit Cost Data"))
        self.lineEdit_Id.setPlaceholderText(_translate("Dialog", "Id"))
        self.label_13.setText(_translate("Dialog", "to"))
        self.label_11.setText(_translate("Dialog", "Date and Time"))
        self.label.setText(_translate("Dialog", "Reason For"))
        self.label_2.setText(_translate("Dialog", "Id :  "))
        self.lineEdit_Much.setPlaceholderText(_translate("Dialog", "3000"))
        self.label_3.setText(_translate("Dialog", "How Much"))
        self.lineEdit_Name.setPlaceholderText(_translate("Dialog", "Mohamed\'s salary"))
        self.pushButton_Search.setText(_translate("Dialog", "Search"))
        self.pushButton_Add.setText(_translate("Dialog", "Add"))
        self.pushButton_Edit.setText(_translate("Dialog", "Edit"))
        self.pushButton_Remove.setText(_translate("Dialog", "Remove"))
        self.Id()
        
    def Search(self):
        self.listWidget.clear()
        elements = ["Id"+" "*(15-len("Id")),"Name"+" "*(35-len("Name")),"Much"+" "*(15-len("Much")),"Time and Date"]
        y = " | ".join(elements)
        listWidgetItem = QtWidgets.QListWidgetItem(y)
        listWidgetItem.setFlags(QtCore.Qt.NoItemFlags)
        self.listWidget.addItem(listWidgetItem)
        self.listWidget.setFont(QtGui.QFont('Roboto Mono', 10))
        
        idd =self.lineEdit_Id.text()
        much = self.lineEdit_Much.text()
        name = self.lineEdit_Name.text()
        time = str(self.dateTimeEdit.dateTime())[23:][:-1]
        timeData = time.split(", ")
        dateFrom = timeData[0] + "-" + "{:02d}".format(int(timeData[1])) + "-" + "{:02d}".format(int(timeData[2]))  + " " + "{:02d}".format(int(timeData[3])) + ":" + "{:02d}".format(int(timeData[4]))
        time2 = str(self.dateTimeEdit_2.dateTime())[23:][:-1]
        timeData2 = time2.split(", ")
        dateTo = timeData2[0] + "-" + "{:02d}".format(int(timeData2[1])) + "-" + "{:02d}".format(int(timeData2[2])) + " " + "{:02d}".format(int(timeData2[3])) + ":" + "{:02d}".format(int(timeData2[4])+1)
        
        if not idd:
            idd = "%"
        if not much:
            much = "%"
        if not name:
            name = "%"
        
        mydb.reconnect()
        mycursor = mydb.cursor()
        sql = "SELECT * FROM cost WHERE c_id LIKE '%{}%' AND c_name LIKE '%{}%' AND much LIKE '%{}%' AND release_date BETWEEN '{}' AND '{}' ".format(idd,name,much,dateFrom,dateTo)
        mycursor.execute(sql)
        myresult = mycursor.fetchall()
        mydb.reconnect()
        for element in myresult:
            listOfColumns=[str(element[0]).title()+" "*(15-len(str(element[0]))),str(element[1]).title()+" "*(35-len(element[1])),str(element[2]).title()+" "*(15-len(str(element[2]))),str(element[3]).title()]
            Result = " | ".join(listOfColumns)
            print(Result)
            listWidgetItem = QtWidgets.QListWidgetItem(Result)
            self.listWidget.addItem(listWidgetItem)
            self.listWidget.setFont(QtGui.QFont('Roboto Mono', 10))

            
    def Select(self,item):
        if not item.text()[:3] == "Id ":
            translator = self.listWidget.item(0).text()
            translatorComponant = translator.split(" | ")
            
            itemSelected = item.text()
            itemSelectedComponant = itemSelected.split(" | ")
            
            dec = {}
            j=0
            for i in translatorComponant:
                i = i.strip()
                dec[i]=itemSelectedComponant[j]
                j +=1
            
            self.lineEdit_Id.setText(str(dec["Id"]).strip())
            self.lineEdit_Name.setText(str(dec["Name"]).strip())
            self.lineEdit_Much.setText(str(dec["Much"]).strip())
            
    def Edit(self,isAdd=0):
        
        idd =self.lineEdit_Id.text().lower()
        much = self.lineEdit_Much.text().lower()
        name = self.lineEdit_Name.text().lower().replace('\'', ' ')
        time2 = str(self.dateTimeEdit_2.dateTime())[23:][:-1]
        timeData2 = time2.split(", ")
        dateTo = timeData2[0] + "-" + "{:02d}".format(int(timeData2[1])) + "-" + "{:02d}".format(int(timeData2[2])) + " " + "{:02d}".format(int(timeData2[3])) + ":" + "{:02d}".format(int(timeData2[4]))
        
        editAbel = 1
        
        if isAdd:
            if idd:
                QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information,"Can't make the Add", "Remove the Id To make add").exec()
                isAdd=0
        if isAdd:
            idd = self.label_2.text().split(" : ")[1]
            
        
        if not idd:
            QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information,"Can't make the Edit", "What is the Cost ID ?").exec()
            editAbel = 0
        
        if not much:
            QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information,"Can't make the Edit", "What is the Cost Much ?").exec()
            editAbel = 0
        else:
            try:
                much = int(much)
            except:
                QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information,"Much Error", "I Think i see character").exec()
                editAbel = 0
        if not name:
            QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information,"Can't make the Edit", "What is The Cost Name ?").exec()
            editAbel = 0
        
        if not isAdd:
            if editAbel:
                mydb.reconnect()
                mycursor = mydb.cursor()
                sql = "UPDATE cost SET c_name = '{}', much = {}, release_date = '{}' WHERE c_id = '{}'".format(name, much, dateTo, idd)
                mycursor.execute(sql)
                mydb.commit()
                mydb.reconnect()
        
                print(mycursor.rowcount, "record(s) affected")
                mydb.reconnect()
                
                self.lineEdit_Much.clear()
                self.lineEdit_Name.clear()
                self.Search()
        else:
            if editAbel:
                mydb.reconnect()
                mycursor = mydb.cursor()
                sql = "INSERT INTO cost (c_id, c_name, much, release_date) VALUES (%s, %s, %s, %s)"
                val = (idd, name, much, dateTo)
                mycursor.execute(sql,val)
                mydb.commit()
                mydb.reconnect()
        
                print(mycursor.rowcount, "record(s) affected")
                mydb.reconnect()
                
                self.lineEdit_Much.clear()
                self.lineEdit_Name.clear()
                self.Search()
        
    
    def Remove(self):
        message = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information,"Are You Sure", "Do You want to remove this dvice ?")
        message.setStandardButtons(QtWidgets.QMessageBox.Save | QtWidgets.QMessageBox.Cancel)
        ret = message.exec()
        if ret == QtWidgets.QMessageBox.Cancel:
            return 0
        idd =self.lineEdit_Id.text().lower()
        mydb.reconnect()
        mycursor = mydb.cursor()
        sql = "DELETE FROM cost WHERE c_id = '{}'".format(idd)
        mycursor.execute(sql)
        mydb.commit()
        mydb.reconnect()

        print(mycursor.rowcount, "record(s) affected")
        mydb.reconnect()
        
        self.lineEdit_Much.clear()
        self.lineEdit_Name.clear()
        self.lineEdit_Id.clear()
        self.Search()
        self.Id()
        
         
         
    









