# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'AddAccessories.ui'
#
# Created by: PyQt5 UI code generator 5.15.8
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from datetime import datetime
from dateutil.relativedelta import relativedelta
import mysql.connector


mydb = mysql.connector.connect(
  host="localhost",
  user="root",
  password="root",
  database="mobile_shop"
)


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(1280, 720)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Dialog.sizePolicy().hasHeightForWidth())
        Dialog.setSizePolicy(sizePolicy)
        Dialog.setMinimumSize(QtCore.QSize(1280, 720))
        Dialog.setMaximumSize(QtCore.QSize(1280, 720))
        font = QtGui.QFont()
        font.setPointSize(10)
        Dialog.setFont(font)
        self.listWidget = QtWidgets.QListWidget(Dialog)
        self.listWidget.setGeometry(QtCore.QRect(10, 20, 1261, 371))
        self.listWidget.setObjectName("listWidget")
        self.layoutWidget = QtWidgets.QWidget(Dialog)
        self.layoutWidget.setGeometry(QtCore.QRect(10, 400, 1261, 171))
        self.layoutWidget.setObjectName("layoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.layoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.label_2 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 1, 0, 1, 1)
        self.lineEdit_Brand = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit_Brand.setFont(font)
        self.lineEdit_Brand.setObjectName("lineEdit_Brand")
        self.gridLayout.addWidget(self.lineEdit_Brand, 2, 3, 1, 1)
        self.lineEdit_Kind = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit_Kind.setFont(font)
        self.lineEdit_Kind.setObjectName("lineEdit_Kind")
        self.gridLayout.addWidget(self.lineEdit_Kind, 2, 4, 1, 1)
        self.lineEdit_Id = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit_Id.setFont(font)
        self.lineEdit_Id.setText("")
        self.lineEdit_Id.setObjectName("lineEdit_Id")
        self.gridLayout.addWidget(self.lineEdit_Id, 2, 0, 1, 1)
        self.lineEdit_For = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit_For.setFont(font)
        self.lineEdit_For.setObjectName("lineEdit_For")
        self.gridLayout.addWidget(self.lineEdit_For, 2, 8, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 1, 3, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.gridLayout.addWidget(self.label_5, 1, 4, 1, 1)
        self.label_9 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.gridLayout.addWidget(self.label_9, 1, 8, 1, 1)
        self.label_12 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_12.setFont(font)
        self.label_12.setObjectName("label_12")
        self.gridLayout.addWidget(self.label_12, 3, 8, 1, 1)
        self.lineEdit_Number = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit_Number.setFont(font)
        self.lineEdit_Number.setObjectName("lineEdit_Number")
        self.gridLayout.addWidget(self.lineEdit_Number, 4, 8, 1, 1)
        self.label_11 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        self.gridLayout.addWidget(self.label_11, 1, 9, 1, 1)
        self.dateTimeEdit = QtWidgets.QDateTimeEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.dateTimeEdit.setFont(font)
        self.dateTimeEdit.setObjectName("dateTimeEdit")
        self.gridLayout.addWidget(self.dateTimeEdit, 2, 9, 1, 1)
        self.label_13 = QtWidgets.QLabel(self.layoutWidget)
        self.label_13.setAlignment(QtCore.Qt.AlignCenter)
        self.label_13.setObjectName("label_13")
        self.gridLayout.addWidget(self.label_13, 3, 9, 1, 1)
        self.dateTimeEdit_2 = QtWidgets.QDateTimeEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.dateTimeEdit_2.setFont(font)
        self.dateTimeEdit_2.setObjectName("dateTimeEdit_2")
        self.gridLayout.addWidget(self.dateTimeEdit_2, 4, 9, 1, 1)
        self.label_4 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 3, 0, 1, 1)
        self.lineEdit_Color = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit_Color.setFont(font)
        self.lineEdit_Color.setObjectName("lineEdit_Color")
        self.gridLayout.addWidget(self.lineEdit_Color, 4, 0, 1, 1)
        self.label_6 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.gridLayout.addWidget(self.label_6, 3, 3, 1, 1)
        self.lineEdit_Price_In = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit_Price_In.setFont(font)
        self.lineEdit_Price_In.setObjectName("lineEdit_Price_In")
        self.gridLayout.addWidget(self.lineEdit_Price_In, 4, 3, 1, 1)
        self.label_8 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.gridLayout.addWidget(self.label_8, 3, 4, 1, 1)
        self.lineEdit_Price_Out = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit_Price_Out.setFont(font)
        self.lineEdit_Price_Out.setObjectName("lineEdit_Price_Out")
        self.gridLayout.addWidget(self.lineEdit_Price_Out, 4, 4, 1, 1)
        self.layoutWidget1 = QtWidgets.QWidget(Dialog)
        self.layoutWidget1.setGeometry(QtCore.QRect(20, 630, 1201, 71))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.layoutWidget1)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton_Search = QtWidgets.QPushButton(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(15)
        self.pushButton_Search.setFont(font)
        self.pushButton_Search.setObjectName("pushButton_Search")
        self.horizontalLayout.addWidget(self.pushButton_Search)
        self.pushButton_Add = QtWidgets.QPushButton(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(15)
        self.pushButton_Add.setFont(font)
        self.pushButton_Add.setObjectName("pushButton_Add")
        self.horizontalLayout.addWidget(self.pushButton_Add)
        self.pushButton_Edit = QtWidgets.QPushButton(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(15)
        self.pushButton_Edit.setFont(font)
        self.pushButton_Edit.setObjectName("pushButton_Edit")
        self.horizontalLayout.addWidget(self.pushButton_Edit)
        self.pushButton_Remove = QtWidgets.QPushButton(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(15)
        self.pushButton_Remove.setFont(font)
        self.pushButton_Remove.setObjectName("pushButton_Remove")
        self.horizontalLayout.addWidget(self.pushButton_Remove)
        
        yearBefore = datetime.now() - relativedelta(months=1)
        self.dateTimeEdit.setDateTime(yearBefore)
        dayBefore = datetime.now()
        self.dateTimeEdit_2.setDateTime(dayBefore)
        
        self.pushButton_Search.clicked.connect(self.Search)
        self.pushButton_Edit.clicked.connect(self.Edit)
        self.listWidget.itemClicked.connect(self.Select)
        self.pushButton_Add.clicked.connect(self.Add)
        self.pushButton_Remove.clicked.connect(self.Remove)


        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Add or Edit Accessories Data"))
        self.label_2.setText(_translate("Dialog", "Id"))
        self.lineEdit_Brand.setPlaceholderText(_translate("Dialog", "JoyRoom"))
        self.lineEdit_Kind.setPlaceholderText(_translate("Dialog", "Charger"))
        self.lineEdit_Id.setPlaceholderText(_translate("Dialog", "Serial Number"))
        self.lineEdit_For.setPlaceholderText(_translate("Dialog", "Lightning"))
        self.label_3.setText(_translate("Dialog", "Brand"))
        self.label_5.setText(_translate("Dialog", "Kind"))
        self.label_9.setText(_translate("Dialog", "For"))
        self.label_12.setText(_translate("Dialog", "Number"))
        self.lineEdit_Number.setPlaceholderText(_translate("Dialog", "7"))
        self.label_11.setText(_translate("Dialog", "Date and Time"))
        self.label_13.setText(_translate("Dialog", "to"))
        self.label_4.setText(_translate("Dialog", "Color"))
        self.lineEdit_Color.setPlaceholderText(_translate("Dialog", "White"))
        self.label_6.setText(_translate("Dialog", "Price on you"))
        self.lineEdit_Price_In.setPlaceholderText(_translate("Dialog", "400"))
        self.label_8.setText(_translate("Dialog", "Price to sell with"))
        self.lineEdit_Price_Out.setPlaceholderText(_translate("Dialog", "450"))
        self.pushButton_Search.setText(_translate("Dialog", "Search"))
        self.pushButton_Add.setText(_translate("Dialog", "Add"))
        self.pushButton_Edit.setText(_translate("Dialog", "Edit"))
        self.pushButton_Remove.setText(_translate("Dialog", "Remove"))
        
    
    def Search(self):
        self.listWidget.clear()
        
        
        elements = ["ID","Brand","Kind","For","Color","Price On You","Price","Number","Date and Time"]
        
        
        listOf=[]
        for eachElement in elements:
            eachElement = str(eachElement).title()
            eachElement = eachElement + (" " * (15-len(eachElement)))
            listOf.append(str(eachElement))
        y = " | ".join(listOf)
        listWidgetItem = QtWidgets.QListWidgetItem(y)
        listWidgetItem.setFlags(QtCore.Qt.NoItemFlags)
        self.listWidget.addItem(listWidgetItem)
        self.listWidget.setFont(QtGui.QFont('Roboto Mono', 10))
        
        #first gar search condition
        idd = self.lineEdit_Id.text()
        brand = self.lineEdit_Brand.text()
        kind = self.lineEdit_Kind.text()
        forr = self.lineEdit_For.text()
        color = self.lineEdit_Color.text()
        number = self.lineEdit_Number.text()
        pin = self.lineEdit_Price_In.text()
        pout= self.lineEdit_Price_Out.text()
        time = str(self.dateTimeEdit.dateTime())[23:][:-1]
        timeData = time.split(", ")
        dateFrom = timeData[0] + "-" + "{:02d}".format(int(timeData[1])) + "-" + "{:02d}".format(int(timeData[2]))  + " " + "{:02d}".format(int(timeData[3])) + ":" + "{:02d}".format(int(timeData[4]))
        time2 = str(self.dateTimeEdit_2.dateTime())[23:][:-1]
        timeData2 = time2.split(", ")
        dateTo = timeData2[0] + "-" + "{:02d}".format(int(timeData2[1])) + "-" + "{:02d}".format(int(timeData2[2])) + " " + "{:02d}".format(int(timeData2[3])) + ":" + "{:02d}".format(int(timeData2[4])+1)
        
        if not idd:
            idd="%"
        if not brand:
            brand="%"
        if not kind:
            kind="%"
        if not forr:
            forr="%"
        if not color:
            color="%"
        if pin:
            try:
                pin = int(pin)
            except:
                QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information,"Price on You Error", "I Think i see character").exec()
                pin = "%"
        else:
            pin = "%"
        if pout:
            try:
                pout = int(pout)
            except:
                QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information,"Price to cell Error", "I Think i see character").exec()
                pout = "%"
        else:
            pout = "%"
        if number:
            try:
                number = int(number)
            except:
                QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information,"Number Error", "I Think i see character").exec()
                number = "%"
        else:
            number = "%"
        
        mydb.reconnect()
        mycursor = mydb.cursor()
        sql = "SELECT * FROM accessories WHERE acc_id LIKE '%{}%' AND brand LIKE '%{}%' AND acc_name LIKE '%{}%' AND color LIKE '%{}%' AND kind LIKE '{}' AND price_out LIKE '{}' AND price_in LIKE '{}' AND release_date BETWEEN '{}' AND '{}' ".format(idd,kind,brand,color,forr,pout,pin,dateFrom,dateTo)
        mycursor.execute(sql)
        myresult = mycursor.fetchall()
        mydb.reconnect()

        for element in myresult:
            mydb.reconnect()
            mycursor = mydb.cursor()
            sql = "SELECT num FROM ids WHERE id = {}".format(element[0])
            mycursor.execute(sql)
            myresult2 = mycursor.fetchall()
            mydb.reconnect()
            
            numb = str(myresult2[0][0])

            listOfColumns=[]
            for eachElement in element:
                eachElement = str(eachElement).title()
                eachElement = eachElement + (" " * (15-len(eachElement)))
                listOfColumns.append((str(eachElement)))
            listOfColumns.insert(-1, (str(numb) + (" " * (15-len(numb)))))
            if listOfColumns[-4] == "0" + (" " * (15-len("0"))) :
                listOfColumns[-4] = "New"+ (" " * (15-len("New")))
            elif listOfColumns[-4] == "1" + (" " * (15-len("1"))) :
                listOfColumns[-4] = "Used"+ (" " * (15-len("Used")))

            
            Result = " | ".join(listOfColumns)
            print(Result)
            listWidgetItem = QtWidgets.QListWidgetItem(Result)
            self.listWidget.addItem(listWidgetItem)
            self.listWidget.setFont(QtGui.QFont('Roboto Mono', 10))
    
    def Edit(self,isAdd=0):
        
        idd = self.lineEdit_Id.text()
        brand = self.lineEdit_Brand.text()
        kind = self.lineEdit_Kind.text()
        forr = self.lineEdit_For.text()
        color = self.lineEdit_Color.text()
        number = self.lineEdit_Number.text()
        pin = self.lineEdit_Price_In.text()
        pout= self.lineEdit_Price_Out.text()
        time = str(self.dateTimeEdit_2.dateTime())[23:][:-1]
        timeData = time.split(", ")
        dateTo = timeData[0] + "-" + "{:02d}".format(int(timeData[1])) + "-" + "{:02d}".format(int(timeData[2])) + " " + "{:02d}".format(int(timeData[3])) + ":" + "{:02d}".format(int(timeData[4]))
        
        
        editAbel = 1
        
        
        if not idd:
            QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information,"Can't make the Edit", "What is the Accessories ID ?").exec()
            editAbel = 0
        if not brand:
            QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information,"Can't make the Edit", "What is the Accessories brand ?").exec()
            editAbel = 0
        if not kind:
            QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information,"Can't make the Edit", "What is the Accessories kind ?").exec()
            editAbel = 0
        if not forr:
            QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information,"Can't make the Edit", "What is the Accessories for What ?").exec()
            editAbel = 0
        if not color:
            QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information,"Can't make the Edit", "What is the Accessories Color ?").exec()
            editAbel = 0
        if pin:
            try:
                pin = int(pin)
            except:
                QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information,"Price on You Error", "I Think i see character").exec()
                editAbel = 0
        else:
            QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information,"Can't make the Edit", "What is the Accessories price on you ?").exec()
            editAbel = 0
        if pout:
            try:
                pout = int(pout)
            except:
                QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information,"Price to cell Error", "I Think i see character").exec()
                editAbel = 0
        else:
            QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information,"Can't make the Edit", "What is the Accessories price you will sell with ?").exec()
            editAbel = 0
        if number:
            try:
                number = int(number)
            except:
                QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information,"Number Error", "I Think i see character").exec()
                editAbel = 0
        else:
            QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information,"Can't make the Edit", "What is the number of this Accessories ?").exec()
            editAbel = 0
        
        if not editAbel:
            return 0
        mydb.reconnect()
        mycursor = mydb.cursor()
        sql = "UPDATE ids SET num = {} WHERE id = {}".format(number,idd)
        mycursor.execute(sql)
        mydb.commit()
        mydb.reconnect()

        print(mycursor.rowcount, "record(s) affected")
        mydb.reconnect()
        mycursor = mydb.cursor()
        if not isAdd:
            sql = "UPDATE accessories SET acc_name = '{}', brand='{}', kind='{}', color='{}', price_in='{}', price_out='{}', release_date = '{}'  WHERE acc_id = {}".format(brand, kind, forr, color, pin, pout, dateTo, idd)
            mycursor.execute(sql)
            mydb.commit()
            print(mycursor.rowcount, "record(s) affected")
            mydb.reconnect()

        else:
            sql = "INSERT INTO ids (id, num) VALUES (%s, %s)"
            val = (idd, number)
            mycursor.execute(sql, val)
            mydb.commit()
            print(mycursor.rowcount, "record(s) affected")
            mydb.reconnect()
            
            sql = "INSERT INTO accessories (acc_id, acc_name, brand, kind, color, price_in, price_out, release_date) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)"
            val = (idd, brand, kind, forr, color, pin, pout, dateTo)
            mycursor.execute(sql, val)
            mydb.commit()
            print(mycursor.rowcount, "record(s) affected")
            mydb.reconnect()
            
        
        
        self.lineEdit_Brand.clear()
        self.lineEdit_Kind.clear()
        self.lineEdit_For.clear()
        self.lineEdit_Color.clear()
        self.lineEdit_Price_In.clear()
        self.lineEdit_Price_Out.clear()
        self.lineEdit_Number.clear()
        self.Search()

    def Select(self,item):
        if not item.text()[:3] == "Id ":
            translator = self.listWidget.item(0).text()
            translatorComponant = translator.split(" | ")
            
            itemSelected = item.text()
            itemSelectedComponant = itemSelected.split(" | ")
            
            dec = {}
            j=0
            for i in translatorComponant:
                i = i.strip()
                dec[i]=itemSelectedComponant[j]
                j +=1
            
            self.lineEdit_Id.setText(str(dec["Id"]).strip())
            self.lineEdit_Brand.setText(str(dec["Brand"]).strip())
            self.lineEdit_Kind.setText(str(dec["Kind"]).strip())
            self.lineEdit_For.setText(str(dec["For"]).strip())
            self.lineEdit_Color.setText(str(dec["Color"]).strip())
            self.lineEdit_Price_In.setText(str(dec["Price On You"]).strip())
            self.lineEdit_Price_Out.setText(str(dec["Price"]).strip())
            self.lineEdit_Number.setText(str(dec["Number"]).strip())
                
    def Add(self):
        idd = self.lineEdit_Id.text()
        mydb.reconnect()
        mycursor = mydb.cursor()
        mycursor.execute("SELECT * FROM ids WHERE id='{}'".format(idd))
        myresult = mycursor.fetchone()
        mydb.reconnect()

        if myresult:
            QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information,"Can't make the Add", "The ID is already taken").exec()
            self.lineEdit_Brand.clear()
            self.lineEdit_Kind.clear()
            self.lineEdit_For.clear()
            self.lineEdit_Color.clear()
            self.lineEdit_Price_In.clear()
            self.lineEdit_Price_Out.clear()
            self.lineEdit_Number.clear()
            self.Search()
        else:
            print("we can edit")
            self.Edit(1)
            
    def Remove(self):
        message = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information,"Are You Sure", "Do You want to remove this dvice ?")
        message.setStandardButtons(QtWidgets.QMessageBox.Save | QtWidgets.QMessageBox.Cancel)
        ret = message.exec()
        if ret == QtWidgets.QMessageBox.Cancel:
            return 0
        idd = self.lineEdit_Id.text().lower()
        if not idd:
            QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information,"Can't make the Remove", "What is the Accessories ID ?").exec()
            return 0
        
        mydb.reconnect()
        mycursor = mydb.cursor()
        mycursor.execute("SELECT * FROM receipt WHERE pro_id='{}'".format(idd))
        myresult = mycursor.fetchone()
        mydb.reconnect()
        
        if myresult:
            QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information,"Can't make the Remove", "Can't Remove Dvice You Sold").exec()
            return 0
        
        mydb.reconnect()
        mycursor = mydb.cursor()
        sql = "DELETE FROM accessories WHERE acc_id = {}".format(idd)
        mycursor.execute(sql)
        mydb.commit()
        print(mycursor.rowcount, "record(s) deleted")
        mydb.reconnect()

        
        mydb.reconnect()
        mycursor = mydb.cursor()
        sql = "DELETE FROM ids WHERE id = {}".format(idd)
        mycursor.execute(sql)
        mydb.commit()
        print(mycursor.rowcount, "record(s) deleted")
        mydb.reconnect()
        
        
        self.lineEdit_Id.clear()
        self.lineEdit_Brand.clear()
        self.lineEdit_Kind.clear()
        self.lineEdit_For.clear()
        self.lineEdit_Color.clear()
        self.lineEdit_Price_In.clear()
        self.lineEdit_Price_Out.clear()
        self.lineEdit_Number.clear()
        self.Search()
        
        print("remove")
