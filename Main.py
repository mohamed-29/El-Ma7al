# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Main.ui'
#
# Created by: PyQt5 UI code generator 5.15.8
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from datetime import datetime
import mysql.connector
import os


mydb = mysql.connector.connect(
  host="localhost",
  user="root",
  password="root",
  database="mobile_shop"
)

from SaveMessage import Ui_Dialog as Ui_DialogDone
from AddPhone import Ui_Dialog as Ui_DialogPhone
from AddAccessories import Ui_Dialog as Ui_DialogAccessories
from AddCost import Ui_Dialog as Ui_DialogCost
from Return import Ui_Dialog as Ui_DialogReturn
from Report import Ui_Dialog as Ui_DialogReport


class Ui_MainWindow(object):
    global editTime
    editTime = 1
    
    def openWindowDone(self):
        dialog = QtWidgets.QDialog()
        dialog.ui = Ui_DialogDone()
        dialog.ui.setupUi(dialog)
        dialog.setAttribute(QtCore.Qt.WA_DeleteOnClose)
        dialog.exec_()
    def openWindowPhone(self):
        dialog = QtWidgets.QDialog()
        dialog.ui = Ui_DialogPhone()
        dialog.ui.setupUi(dialog)
        dialog.setAttribute(QtCore.Qt.WA_DeleteOnClose)
        dialog.exec_()
    def openWindowAccessories(self):
        dialog = QtWidgets.QDialog()
        dialog.ui = Ui_DialogAccessories()
        dialog.ui.setupUi(dialog)
        dialog.setAttribute(QtCore.Qt.WA_DeleteOnClose)
        dialog.exec_()
    def openWindowCost(self):
        dialog = QtWidgets.QDialog()
        dialog.ui = Ui_DialogCost()
        dialog.ui.setupUi(dialog)
        dialog.setAttribute(QtCore.Qt.WA_DeleteOnClose)
        dialog.exec_()
    def openWindowReturn(self):
        dialog = QtWidgets.QDialog()
        dialog.ui = Ui_DialogReturn()
        dialog.ui.setupUi(dialog)
        dialog.setAttribute(QtCore.Qt.WA_DeleteOnClose)
        dialog.exec_()
    def openWindowReport(self):
        dialog = QtWidgets.QDialog()
        dialog.ui = Ui_DialogReport()
        dialog.ui.setupUi(dialog)
        dialog.setAttribute(QtCore.Qt.WA_DeleteOnClose)
        dialog.exec_()    
    
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        #MainWindow.setWindowIcon(QtGui.QIcon("store.icon"))
        MainWindow.resize(1920, 980)
        MainWindow.setMinimumSize(QtCore.QSize(1920, 980))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setGeometry(QtCore.QRect(10, 50, 1371, 250))
        self.listWidget.setObjectName("listWidget")
        
        self.listWidget_2 = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget_2.setGeometry(QtCore.QRect(10, 350, 1371, 500))
        self.listWidget_2.setObjectName("listWidget_2")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(900, 850, 141, 61))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label.setFont(font)
        self.label.setScaledContents(False)
        self.label.setObjectName("label")
        self.label_Rec_Total = QtWidgets.QLabel(self.centralwidget)
        self.label_Rec_Total.setGeometry(QtCore.QRect(1060, 860, 301, 51))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.label_Rec_Total.setFont(font)
        self.label_Rec_Total.setObjectName("label_Rec_Total")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(1570, 800, 171, 81))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setObjectName("pushButton_4")
        
        self.label_18 = QtWidgets.QLabel(self.centralwidget)
        self.label_18.setGeometry(QtCore.QRect(10, 10, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_18.setFont(font)
        self.label_18.setObjectName("label_18")
        self.label_19 = QtWidgets.QLabel(self.centralwidget)
        self.label_19.setGeometry(QtCore.QRect(10, 315, 171, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_19.setFont(font)
        self.label_19.setObjectName("label_19")
        self.label_Rec_Id = QtWidgets.QLabel(self.centralwidget)
        self.label_Rec_Id.setGeometry(QtCore.QRect(160, 325, 101, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_Rec_Id.setFont(font)
        self.label_Rec_Id.setObjectName("label_Rec_Id")
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(1400, 10, 491, 321))
        self.layoutWidget.setObjectName("layoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.layoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.lineEdit_Color = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_Color.setFont(font)
        self.lineEdit_Color.setObjectName("lineEdit_Color")
        self.gridLayout.addWidget(self.lineEdit_Color, 6, 0, 1, 1)
        self.lineEdit_Model = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_Model.setFont(font)
        self.lineEdit_Model.setObjectName("lineEdit_Model")
        self.gridLayout.addWidget(self.lineEdit_Model, 4, 0, 1, 1)
        self.label_6 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.gridLayout.addWidget(self.label_6, 3, 0, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.gridLayout.addWidget(self.label_5, 3, 1, 1, 1)
        self.label_7 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.gridLayout.addWidget(self.label_7, 5, 1, 1, 1)
        self.label_21 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_21.setFont(font)
        self.label_21.setObjectName("label_21")
        self.gridLayout.addWidget(self.label_21, 7, 1, 1, 1)
        self.lineEdit_Battary = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_Battary.setFont(font)
        self.lineEdit_Battary.setObjectName("lineEdit_Battary")
        self.gridLayout.addWidget(self.lineEdit_Battary, 4, 1, 1, 1)
        self.label_20 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_20.setFont(font)
        self.label_20.setObjectName("label_20")
        self.gridLayout.addWidget(self.label_20, 7, 0, 1, 1)
        self.lineEdit_Price_To = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_Price_To.setFont(font)
        self.lineEdit_Price_To.setObjectName("lineEdit_Price_To")
        self.gridLayout.addWidget(self.lineEdit_Price_To, 8, 1, 1, 1)
        self.lineEdit_Price_From = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_Price_From.setFont(font)
        self.lineEdit_Price_From.setObjectName("lineEdit_Price_From")
        self.gridLayout.addWidget(self.lineEdit_Price_From, 8, 0, 1, 1)
        self.label_4 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 1, 1, 1, 1)
        self.lineEdit_Used = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_Used.setFont(font)
        self.lineEdit_Used.setObjectName("lineEdit_Used")
        self.gridLayout.addWidget(self.lineEdit_Used, 6, 1, 1, 1)
        self.label_9 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(19)
        font.setBold(False)
        font.setWeight(50)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.gridLayout.addWidget(self.label_9, 0, 0, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 1, 0, 1, 1)
        self.lineEdit_Id = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_Id.setFont(font)
        self.lineEdit_Id.setObjectName("lineEdit_Id")
        self.gridLayout.addWidget(self.lineEdit_Id, 2, 0, 1, 1)
        self.lineEdit_Brand = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_Brand.setFont(font)
        self.lineEdit_Brand.setObjectName("lineEdit_Brand")
        self.gridLayout.addWidget(self.lineEdit_Brand, 2, 1, 1, 1)
        self.label_8 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.gridLayout.addWidget(self.label_8, 5, 0, 1, 1)
        self.pushButton = QtWidgets.QPushButton(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(15)
        self.pushButton.setFont(font)
        self.pushButton.setAutoDefault(False)
        self.pushButton.setFlat(False)
        self.pushButton.setObjectName("pushButton")
        
        self.gridLayout.addWidget(self.pushButton, 0, 1, 1, 1)
        self.layoutWidget1 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget1.setGeometry(QtCore.QRect(1400, 350, 491, 241))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.layoutWidget1)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.label_14 = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(19)
        self.label_14.setFont(font)
        self.label_14.setObjectName("label_14")
        self.gridLayout_2.addWidget(self.label_14, 0, 0, 1, 1)
        self.label_15 = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_15.setFont(font)
        self.label_15.setObjectName("label_15")
        self.gridLayout_2.addWidget(self.label_15, 1, 0, 1, 1)
        self.label_10 = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.gridLayout_2.addWidget(self.label_10, 1, 1, 1, 1)
        self.lineEdit_Id2 = QtWidgets.QLineEdit(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_Id2.setFont(font)
        self.lineEdit_Id2.setObjectName("lineEdit_Id2")
        self.gridLayout_2.addWidget(self.lineEdit_Id2, 2, 0, 1, 1)
        self.lineEdit_Kind2 = QtWidgets.QLineEdit(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_Kind2.setFont(font)
        self.lineEdit_Kind2.setObjectName("lineEdit_Kind2")
        self.gridLayout_2.addWidget(self.lineEdit_Kind2, 2, 1, 1, 1)
        self.label_12 = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_12.setFont(font)
        self.label_12.setObjectName("label_12")
        self.gridLayout_2.addWidget(self.label_12, 3, 0, 1, 1)
        self.label_11 = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        self.gridLayout_2.addWidget(self.label_11, 3, 1, 1, 1)
        self.lineEdit_Brand2 = QtWidgets.QLineEdit(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_Brand2.setFont(font)
        self.lineEdit_Brand2.setObjectName("lineEdit_Brand2")
        self.gridLayout_2.addWidget(self.lineEdit_Brand2, 4, 0, 1, 1)
        self.lineEdit_For2 = QtWidgets.QLineEdit(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_For2.setFont(font)
        self.lineEdit_For2.setObjectName("lineEdit_For2")
        self.gridLayout_2.addWidget(self.lineEdit_For2, 4, 1, 1, 1)
        self.label_13 = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_13.setFont(font)
        self.label_13.setObjectName("label_13")
        self.gridLayout_2.addWidget(self.label_13, 5, 0, 1, 1)
        self.lineEdit_Color2 = QtWidgets.QLineEdit(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_Color2.setFont(font)
        self.lineEdit_Color2.setObjectName("lineEdit_Color2")
        self.gridLayout_2.addWidget(self.lineEdit_Color2, 6, 0, 1, 1)
        self.pushButton_2 = QtWidgets.QPushButton(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(15)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.gridLayout_2.addWidget(self.pushButton_2, 5, 1, 2, 1)
        
        self.layoutWidget2 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget2.setGeometry(QtCore.QRect(1450, 610, 231, 159))
        self.layoutWidget2.setObjectName("layoutWidget2")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.layoutWidget2)
        self.gridLayout_3.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.label_17 = QtWidgets.QLabel(self.layoutWidget2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_17.setFont(font)
        self.label_17.setObjectName("label_17")
        self.gridLayout_3.addWidget(self.label_17, 4, 0, 1, 1)
        self.dateTimeEdit = QtWidgets.QDateTimeEdit(self.layoutWidget2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.dateTimeEdit.setFont(font)
        self.dateTimeEdit.setObjectName("dateTimeEdit")
        self.gridLayout_3.addWidget(self.dateTimeEdit, 2, 0, 1, 1)
        self.lineEdit_Sell_Price = QtWidgets.QLineEdit(self.layoutWidget2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_Sell_Price.setFont(font)
        self.lineEdit_Sell_Price.setObjectName("lineEdit_Sell_Price")
        self.gridLayout_3.addWidget(self.lineEdit_Sell_Price, 5, 0, 1, 1)
        self.label_16 = QtWidgets.QLabel(self.layoutWidget2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_16.setFont(font)
        self.label_16.setObjectName("label_16")
        self.gridLayout_3.addWidget(self.label_16, 1, 0, 1, 1)
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(1730, 720, 93, 33))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_5.setFont(font)
        self.pushButton_5.setObjectName("pushButton_5")

        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(1730, 670, 93, 33))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")
        
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(10, 850, 141, 61))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_2.setFont(font)
        self.label_2.setScaledContents(False)
        self.label_2.setObjectName("label_2")
        self.label_Rec_Total_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_Rec_Total_2.setGeometry(QtCore.QRect(170, 860, 301, 51))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.label_Rec_Total_2.setFont(font)
        self.label_Rec_Total_2.setObjectName("label_Rec_Total_2")
        
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.actionAdd_Phone = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("Icons/cell-phone.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAdd_Phone.setIcon(icon)
        font = QtGui.QFont()
        font.setPointSize(8)
        self.actionAdd_Phone.setFont(font)
        self.actionAdd_Phone.setObjectName("actionAdd_Phone")
        self.actionAccessories = QtWidgets.QAction(MainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("Icons/earbuds.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAccessories.setIcon(icon1)
        self.actionAccessories.setObjectName("actionAccessories")
        self.actionCost = QtWidgets.QAction(MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("Icons/checklist.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionCost.setIcon(icon2)
        self.actionCost.setObjectName("actionCost")
        self.actionReturn = QtWidgets.QAction(MainWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("Icons/product-return.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionReturn.setIcon(icon3)
        self.actionReturn.setObjectName("actionReturn")
        self.actionReport = QtWidgets.QAction(MainWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("Icons/calculation.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionReport.setIcon(icon4)
        self.actionReport.setObjectName("actionReport")
        self.toolBar.addAction(self.actionAdd_Phone)
        self.toolBar.addAction(self.actionAccessories)
        self.toolBar.addAction(self.actionCost)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionReturn)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionReport)
        
        self.actionAdd_Phone.triggered.connect(self.openWindowPhone)
        self.actionAccessories.triggered.connect(self.openWindowAccessories)
        self.actionCost.triggered.connect(self.openWindowCost)
        self.actionReturn.triggered.connect(self.openWindowReturn)
        self.actionReport.triggered.connect(self.openWindowReport)
        
        self.listWidget.itemClicked.connect(self.Selected_Item)
        
        self.pushButton.clicked.connect(self.Search_Product)
        
        self.pushButton_2.clicked.connect(self.Search_Accessories)
        
        self.pushButton_3.clicked.connect(self.Add)
        
        self.pushButton_4.clicked.connect(self.Done)
        
        self.pushButton_5.clicked.connect(self.Remove)
        
        self.lineEdit_Id.returnPressed.connect(self.pushButton.click)
        self.lineEdit_Brand.returnPressed.connect(self.pushButton.click)
        self.lineEdit_Model.returnPressed.connect(self.pushButton.click)
        self.lineEdit_Battary.returnPressed.connect(self.pushButton.click)
        self.lineEdit_Color.returnPressed.connect(self.pushButton.click)
        self.lineEdit_Used.returnPressed.connect(self.pushButton.click)
        self.lineEdit_Price_From.returnPressed.connect(self.pushButton.click)
        self.lineEdit_Price_To.returnPressed.connect(self.pushButton.click)
        
        self.lineEdit_Id2.returnPressed.connect(self.pushButton_2.click)
        self.lineEdit_Brand2.returnPressed.connect(self.pushButton_2.click)
        self.lineEdit_Kind2.returnPressed.connect(self.pushButton_2.click)
        self.lineEdit_For2.returnPressed.connect(self.pushButton_2.click)
        self.lineEdit_Color2.returnPressed.connect(self.pushButton_2.click)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.lineEdit_Id, self.lineEdit_Brand)
        MainWindow.setTabOrder(self.lineEdit_Brand, self.lineEdit_Model)
        MainWindow.setTabOrder(self.lineEdit_Model, self.lineEdit_Battary)
        MainWindow.setTabOrder(self.lineEdit_Battary, self.lineEdit_Color)
        MainWindow.setTabOrder(self.lineEdit_Color, self.lineEdit_Used)
        MainWindow.setTabOrder(self.lineEdit_Used, self.lineEdit_Price_From)
        MainWindow.setTabOrder(self.lineEdit_Price_From, self.lineEdit_Price_To)
        MainWindow.setTabOrder(self.lineEdit_Price_To, self.pushButton)
        MainWindow.setTabOrder(self.pushButton, self.lineEdit_Id2)
        MainWindow.setTabOrder(self.lineEdit_Id2, self.lineEdit_Kind2)
        MainWindow.setTabOrder(self.lineEdit_Kind2, self.lineEdit_Brand2)
        MainWindow.setTabOrder(self.lineEdit_Brand2, self.lineEdit_For2)
        MainWindow.setTabOrder(self.lineEdit_For2, self.lineEdit_Color2)
        MainWindow.setTabOrder(self.lineEdit_Color2, self.pushButton_2)
        MainWindow.setTabOrder(self.pushButton_2, self.dateTimeEdit)
        MainWindow.setTabOrder(self.dateTimeEdit, self.lineEdit_Sell_Price)
        MainWindow.setTabOrder(self.lineEdit_Sell_Price, self.pushButton_4)
        MainWindow.setTabOrder(self.pushButton_4, self.listWidget)
        MainWindow.setTabOrder(self.listWidget, self.listWidget_2)
        

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "El Ma7al"))
        self.label.setText(_translate("MainWindow", "Total"))
        self.label_Rec_Total.setText(_translate("MainWindow", "0"))
        self.pushButton_4.setText(_translate("MainWindow", "Done"))
        self.label_18.setText(_translate("MainWindow", "Search"))
        self.label_19.setText(_translate("MainWindow", "Receipt items : "))
        self.label_Rec_Id.setText(_translate("MainWindow", "Receipt ID"))
        self.label_6.setText(_translate("MainWindow", "Model"))
        self.label_5.setText(_translate("MainWindow", "Battary"))
        self.label_7.setText(_translate("MainWindow", "Used (Y , N)"))
        self.label_21.setText(_translate("MainWindow", "To :"))
        self.label_20.setText(_translate("MainWindow", "Price From:"))
        self.label_4.setText(_translate("MainWindow", "Brand"))
        self.label_9.setText(_translate("MainWindow", "Phone"))
        self.label_3.setText(_translate("MainWindow", "ID"))
        self.label_8.setText(_translate("MainWindow", "Color"))
        self.pushButton.setText(_translate("MainWindow", "Search"))
        self.label_14.setText(_translate("MainWindow", "Accessories"))
        self.label_15.setText(_translate("MainWindow", "ID"))
        self.label_10.setText(_translate("MainWindow", "Kind"))
        self.label_12.setText(_translate("MainWindow", "Brand"))
        self.label_11.setText(_translate("MainWindow", "For"))
        self.label_13.setText(_translate("MainWindow", "Color"))
        self.pushButton_2.setText(_translate("MainWindow", "Search"))
        self.label_17.setText(_translate("MainWindow", "Price"))
        self.label_16.setText(_translate("MainWindow", "Date"))
        self.pushButton_5.setText(_translate("MainWindow", "Remove"))
        self.pushButton_3.setText(_translate("MainWindow", "Add"))
        self.label_2.setText(_translate("MainWindow", "Profit"))
        self.label_Rec_Total_2.setText(_translate("MainWindow", "0"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.actionAdd_Phone.setText(_translate("MainWindow", "Add Phone"))
        self.actionAdd_Phone.setToolTip(_translate("MainWindow", "Add or edit or remove phones in your database"))
        self.actionAccessories.setText(_translate("MainWindow", "Accessories"))
        self.actionAccessories.setToolTip(_translate("MainWindow", "Add oe edit or remove accessories"))
        self.actionCost.setText(_translate("MainWindow", "Cost"))
        self.actionCost.setToolTip(_translate("MainWindow", "Add the shop cost"))
        self.actionReturn.setText(_translate("MainWindow", "Return"))
        self.actionReturn.setToolTip(_translate("MainWindow", "Sorry for your return"))
        self.actionReport.setText(_translate("MainWindow", "Report"))
        self.actionReport.setToolTip(_translate("MainWindow", "make report for all what happen in a while"))
        self.dateTimeEdit.setDateTime(datetime.now())
    #The Search function to search for phones from datasbase
    def Search_Product(self):
        self.listWidget.clear()
        elements = ["ID","Brand","Model","Battary","Hard","Ram","Color","Price On You","Condition","Price","Number"]
        
        used = self.lineEdit_Used.text()
        used = used.lower()
        
        if used == "y" or used == "yes":
            used = 1
        elif used == "n" or used == "no":
            used = 0
            elements.pop(3)
        else:
            used = "%"
        
        listOf=[]
        for eachElement in elements:
            eachElement = str(eachElement).title()
            eachElement = eachElement + (" " * (15-len(eachElement)))
            listOf.append(str(eachElement))
        y = " | ".join(listOf)
        listWidgetItem = QtWidgets.QListWidgetItem(y)
        listWidgetItem.setFlags(QtCore.Qt.NoItemFlags)
        self.listWidget.addItem(listWidgetItem)
        self.listWidget.setFont(QtGui.QFont('Roboto Mono', 10))
        
        #first gar search condition
        idd = self.lineEdit_Id.text()
        brand = self.lineEdit_Brand.text()
        model = self.lineEdit_Model.text()
        battary = self.lineEdit_Battary.text()
        color = self.lineEdit_Color.text()
        
        pfrom = self.lineEdit_Price_From.text()
        pto= self.lineEdit_Price_To.text()
        
        if not idd:
            idd="%"
        if not brand:
            brand="%"
        if not model:
            model="%"
        if not battary:
            battary="%"
        if not color:
            color="%"
        
        if pfrom:
            try:
                pfrom = int(pfrom)
            except:
                QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information,"Price From Error", "I Think i see character").exec()
                pfrom = 1000000000
        else:
            pfrom = 1000000000
        
        if pto:
            try:
                pto = int(pto)
            except:
                QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information,"Price to Error", "I Think i see character").exec()
                pto = 0
        else:
            pto = 0
        mydb.reconnect()
        mycursor = mydb.cursor()
        sql = "SELECT * FROM mobile_devices WHERE serial_id LIKE '%{}%' AND brand LIKE '%{}%' AND model LIKE '%{}%' AND battary LIKE '%{}%' AND color LIKE '%{}%' AND is_used LIKE '{}' AND price_out < {} AND price_out > {}".format(idd,brand,model,battary,color,used,pfrom,pto)
        mycursor.execute(sql)
        myresult = mycursor.fetchall()
        mydb.reconnect()
        
        for element in myresult:
            mycursor = mydb.cursor()
            sql = "SELECT num FROM ids WHERE id = '{}'".format(element[0])
            mycursor.execute(sql)
            myresult2 = mycursor.fetchall()
            
            element = list(element[:-1])
            
            numb = str(myresult2[0][0])
            if int(numb) <= 0 : 
                continue
            listOfColumns=[numb]
            for eachElement in element:
                eachElement = str(eachElement).title()
                eachElement = eachElement + (" " * (15-len(eachElement)))
                listOfColumns.insert(-1,(str(eachElement)))
            if listOfColumns[-3] == "0" + (" " * (15-len("0"))) :
                listOfColumns[-3] = "New"+ (" " * (15-len("New")))

            elif listOfColumns[-3] == "1" + (" " * (15-len("1"))) :
                listOfColumns[-3] = "Used"+ (" " * (15-len("Used")))
            if not used:
                listOfColumns.pop(3)
            Result = " | ".join(listOfColumns)
            print(Result)
            listWidgetItem = QtWidgets.QListWidgetItem(Result)
            self.listWidget.addItem(listWidgetItem)
            self.listWidget.setFont(QtGui.QFont('Roboto Mono', 10))
    
    #The Search function to search for accessories from datasbase
    def Search_Accessories(self):
        self.listWidget.clear()
        elements = ["ID","Brand","Kind","For","Color","Price On You","Price","Number"]
        listOf=[]
        for eachElement in elements:
            eachElement = str(eachElement).title()
            eachElement = eachElement + (" " * (15-len(eachElement)))
            listOf.append(str(eachElement))
        y = " | ".join(listOf)
        listWidgetItem = QtWidgets.QListWidgetItem(y)
        listWidgetItem.setFlags(QtCore.Qt.NoItemFlags)
        self.listWidget.addItem(listWidgetItem)
        self.listWidget.setFont(QtGui.QFont('Roboto Mono', 10))
        
        #first get search condition
        idd = self.lineEdit_Id2.text()
        brand = self.lineEdit_Brand2.text()
        kind = self.lineEdit_Kind2.text()
        for2 = self.lineEdit_For2.text()
        color = self.lineEdit_Color2.text()

        
        if not idd:
            idd="%"
        if not brand:
            brand="%"
        if not kind:
            kind="%"
        if not for2:
            for2="%"
        if not color:
            color="%"
        mydb.reconnect()
        mycursor = mydb.cursor()
        sql = "SELECT * FROM accessories WHERE acc_id LIKE '%{}%' AND acc_name LIKE '%{}%' AND brand LIKE '%{}%' AND kind LIKE '%{}%' AND color LIKE '%{}%'".format(idd,kind,brand,for2,color)
        mycursor.execute(sql)
        myresult = mycursor.fetchall()
        mydb.reconnect()

        for element in myresult:
            mydb.reconnect()
            mycursor = mydb.cursor()
            sql = "SELECT num FROM ids WHERE id LIKE '%{}%'".format(element[0])
            mycursor.execute(sql)
            myresult2 = mycursor.fetchall()
            mydb.reconnect()
            
            element = list(element[:-1])
            
            numb = str(myresult2[0][0])
            if int(numb) <= 0 : 
                continue
            listOfColumns=[numb]
            for eachElement in element:
                eachElement = str(eachElement).title()
                eachElement = eachElement + (" " * (15-len(eachElement)))
                listOfColumns.insert(-1,(str(eachElement)))
            Result = " | ".join(listOfColumns)
            print(Result)
            listWidgetItem = QtWidgets.QListWidgetItem(Result)
            self.listWidget.addItem(listWidgetItem)
            self.listWidget.setFont(QtGui.QFont('Roboto Mono', 10))
    
    def Selected_Item(self,item):
        if not item.text()[:3] == "Id ":
            print("Selected")
            translator = self.listWidget.item(0).text()
            translatorComponant = translator.split(" | ")
            
            itemSelected = item.text()
            itemSelectedComponant = itemSelected.split(" | ")
            
            dec = {}
            j=0
            for i in translatorComponant:
                i = i.strip()
                dec[i]=itemSelectedComponant[j]
                j +=1
            
            price = int(dec["Price"])
            self.lineEdit_Sell_Price.setText(str(price))
            now = datetime.now()
            if editTime:
                self.dateTimeEdit.setDateTime(now)
    
    def Add(self):
        #عند الضغط على زر الاضافه نتاكد من وجود item مختار اولاً
        
        currentItem = self.listWidget.currentItem()
        
        if currentItem:
            #بعد التاكد نقوم بثبيت الوقت لاننا سوف نستخدم التاريخ ف صناعه ID الفاتوره
            print("Add")
            self.dateTimeEdit.setReadOnly(True)
            global editTime
            editTime = 0
            #نتاكد اذا كانت الفانوره قد اخذت بالفعل ID ام لا
            if self.label_Rec_Id.text() == "Receipt ID":
                #نحصل على التاريخ الموجود ف خانه تعديل و ادخال الوقت و التاريخ
                time = str(self.dateTimeEdit.dateTime())[23:][:-1]
                timeData = time.split(", ")
                recetId = timeData[0][-2:] + "{:02d}".format(int(timeData[1])) + "{:02d}".format(int(timeData[2]))
                #شكل ال ID مكون من اول رقمبن و هما السنه مثال 23 تعنى سنه 2023
                #و ثانى رقمين و هما ال شهر مثال 02 تعنى شهر 2
                #و ثالت رقمين و هما اليوم متال 15 تعنى يوم 15
                # حيث يكون ال ID النهائى 230215 و يعنى سنه 2023 شهر 2 يوم15
                # ثم نقوم بأيضافه رقم يزيد بعد كل طلب و يعنى رقم الاوردر لهذا اليوم
                #print(recetId)
                mydb.reconnect()
                mycursor = mydb.cursor()
                sql = "SELECT rec_id FROM receipt WHERE rec_id LIKE '{}%'  ORDER BY rec_id DESC".format(recetId)
                mycursor.execute(sql)
                myresult = mycursor.fetchall()
                mydb.reconnect()
                #نبحث عن اخر فاتوره مسجله بهذا التريخ لذايدتها بقيه 1
                if myresult:
                    myresult = list(str(myresult[0][0]))
                    rnn = int("".join(myresult[6:]))
                    rnn = rnn +1
                    rnn = list(str(rnn))
                    print(rnn)
                    myresult = myresult[:6]
                    for e in rnn:
                        myresult.append(e)
                    print(myresult)
                    recetIdF = int("".join(myresult))
                    
                else:
                    #و ان لم نجد نكوم بأيضافه اول 1
                    recetIdF = recetId + "1"    
                self.label_Rec_Id.setText(str(recetIdF))
            #نقوم بصناعه مترجم لنفهم المكونات الموجوده ف ال item المختاره
            translator = self.listWidget.item(0).text()
            translatorComponant = translator.split(" | ")
            
            itemSelected = currentItem.text()
            itemSelectedComponant = itemSelected.split(" | ")
            
            dec = {}
            j=0
            for i in translatorComponant:
                i = i.strip()
                dec[i]=itemSelectedComponant[j]
                if i == "Price On You":
                    toRemove = j
                j +=1
            #print(dec)
            #نحصل على السعر المعدل من المستخدم ليكون سعر البيع النهائى
            price = self.lineEdit_Sell_Price.text()
            itemSelectedComponant[-2] = price
            
            #نحصل على سعر الشراء لنقوم بحساب المكسب فيما بعد
            profit1 = itemSelectedComponant.pop(toRemove)
            itemSelectedComponant.pop(-1)
            #اذا كان الجهاز جديد نقوم نحذف خانه البطاريه
            #و من الممكن يكون اكسسوارات فنقوم بوضع except للتعامل مع هذه المشكله
            
            isPhone = 1
            try:
                if dec["Condition"].strip() == "New":
                    itemSelectedComponant.pop(3)
            except:
                isPhone = 0
                print("Not a Phone")
                
            #علم لمعرفه ايذا كان قد تمت عمليه الايضافه ام لا
            isDone = 0
            #اولا نتاكد من كل ال items الموجوده مسبقاً فى خانه الفاتوره
            #وهذا لعدم تكرار المنتج و البديل ان نفوم بعمل x و رقم تكرار المنتج
            if self.listWidget_2.count():
                #print("there is another componant")
                for j in range(self.listWidget_2.count()):
                    i = self.listWidget_2.item(j).text().split(" | ")
                    # نتاكد اذا كان ال id قد كرر ام لا
                    if i[0] == itemSelectedComponant[0]:
                        print("repeted")
                        priceAndN = i[-1].split("   x   ")
                        #ان تكرر نرا كم مره قد تكرر
                        if len(priceAndN) == 1:
                            # لو كانت مره واحده ف نقوم باضافه اول X 2
                            item = " | ".join(itemSelectedComponant)
                            item = item + "   x   2"
                            listWidgetItem = QtWidgets.QListWidgetItem(item)
                            self.listWidget_2.takeItem(j)
                            self.listWidget_2.addItem(listWidgetItem)
                            self.listWidget_2.setFont(QtGui.QFont('Roboto Mono', 10))
                            isDone = 1
                            #و لو كانت اكثر من مرتين نقوم باضافه x و عدد مرات التكرار
                        elif len(priceAndN) == 2:
                            Nu = int(priceAndN[1])
                            Nu = Nu + 1
                            item = " | ".join(itemSelectedComponant)
                            item = item + "   x   " + str(Nu)
                            listWidgetItem = QtWidgets.QListWidgetItem(item)
                            self.listWidget_2.takeItem(j)
                            self.listWidget_2.addItem(listWidgetItem)
                            self.listWidget_2.setFont(QtGui.QFont('Roboto Mono', 10))
                            isDone = 1
           # لو كان ال id لم يتكرر من قبل سنقوم بعمل ايضافه عاديه
            if not isDone:
                item = " | ".join(itemSelectedComponant)
                listWidgetItem = QtWidgets.QListWidgetItem(item)
                self.listWidget_2.addItem(listWidgetItem)
                self.listWidget_2.setFont(QtGui.QFont('Roboto Mono', 10))
                isDone = 1
            # نقوم بحساب اجمالى مبلغ الفاتوره
            total = self.label_Rec_Total.text()
            total = int(total)
            total = total + int(dec["Price"])
            self.label_Rec_Total.setText(str(total))
            # نقوم بحساب اجمالى المكسب
            profit = self.label_Rec_Total_2.text()
            profit = int(profit)
            profit = profit + (int(dec["Price"]) - int(profit1))
            self.label_Rec_Total_2.setText(str(profit))
            if isDone:
                #نقوم بتحديث ال database عند ايضافه المنتج لمرحله البيع (الفاتوره) و ذلك لانه اذا قد نفذ المنتج لا يمكن ايضافته من جديد
                #اولاً نحصل على العدد المتاح من المنتج ف ال database ثم ننقص منه واحد
                mycursor = mydb.cursor()
                sql = "SELECT num FROM ids WHERE id = {}".format(itemSelectedComponant[0].strip())
                mycursor.execute(sql)
                myresult = mycursor.fetchall()
                newNum = myresult[0][0]
                newNum -= 1
                #نقوم بعمل التديث بالرقم الجديد المتاح
                mycursor = mydb.cursor()
                sql = "UPDATE ids SET num = {} WHERE id = {}".format(newNum,itemSelectedComponant[0].strip())
                mycursor.execute(sql)
                mydb.commit()
    
                print(mycursor.rowcount, "record(s) affected")
                #نقوم بعمل عمليه البحث مره اخره لنحدث الحدول بالبيانات الجديده
                if isPhone:
                    self.Search_Product()
                else:
                    self.Search_Accessories()
    
    def Remove(self):
        # عند الضغط على زر ال remove نتاكد اولاً من وجود item مختار
        print("Remove")
        currentItem = self.listWidget_2.currentItem()
        if currentItem:
            itemSelected = currentItem.text()
            itemSelectedComponant = itemSelected.split(" | ")
            total = self.label_Rec_Total.text()
            total = int(total)
            total = total - int(itemSelectedComponant[-1].split("   x   ")[0])
            self.label_Rec_Total.setText(str(total))
            
            
            isDone = 0
            
            priceAndN = itemSelectedComponant[-1].split("   x   ")
            if len(priceAndN) == 1:
                itemN = self.listWidget_2.currentRow()
                self.listWidget_2.takeItem(itemN)
                isDone = 1
            elif len(priceAndN) == 2:
                itemN = self.listWidget_2.currentRow()
                Nu = int(priceAndN[1])
                Nu = Nu - 1
                if Nu == 1 :
                    priceAndN = priceAndN[0]
                    itemN = self.listWidget_2.currentRow()
                    self.listWidget_2.takeItem(itemN)
                    itemSelectedComponant[-1] = priceAndN
                    item = " | ".join(itemSelectedComponant)
                    listWidgetItem = QtWidgets.QListWidgetItem(item)
                    self.listWidget_2.addItem(listWidgetItem)
                    self.listWidget_2.setFont(QtGui.QFont('Roboto Mono', 10))
                    isDone = 1
                else:
                    priceAndN[1] = str(Nu)
                    priceAndN = "   x   ".join(priceAndN)
                    itemN = self.listWidget_2.currentRow()
                    self.listWidget_2.takeItem(itemN)
                    itemSelectedComponant[-1] = priceAndN
                    item = " | ".join(itemSelectedComponant)
                    listWidgetItem = QtWidgets.QListWidgetItem(item)
                    self.listWidget_2.addItem(listWidgetItem)
                    self.listWidget_2.setFont(QtGui.QFont('Roboto Mono', 10))
                    isDone = 1
            
            idd = itemSelectedComponant[0]
            
            mydb.reconnect()
            mycursor = mydb.cursor()
            sql = "SELECT price_in FROM accessories WHERE acc_id = {}".format(idd)
            mycursor.execute(sql)
            myresult = mycursor.fetchall()
            mydb.reconnect()
            
            if not myresult:
                mycursor = mydb.cursor()
                sql = "SELECT price_in FROM mobile_devices WHERE serial_id = {}".format(idd)
                mycursor.execute(sql)
                myresult = mycursor.fetchall()
            
            profit1 = int(myresult[0][0])
            profit = self.label_Rec_Total_2.text()
            profit = int(profit)
            profit = profit - (int(itemSelectedComponant[-1].split(" x ")[0]) - int(profit1))
            self.label_Rec_Total_2.setText(str(profit))
            
            if isDone:
            
                if len(itemSelectedComponant) > 7 :
                    isPhone = 1
                else:
                    isPhone = 0
                
                mydb.reconnect()
                mycursor = mydb.cursor()
                sql = "SELECT num FROM ids WHERE id = {}".format(itemSelectedComponant[0].strip())
                mycursor.execute(sql)
                myresult = mycursor.fetchall()
                mydb.reconnect()
                newNum = myresult[0][0]
                newNum += 1
                #نقوم بعمل التحديث بالرقم الجديد المتاح
                mydb.reconnect()
                mycursor = mydb.cursor()
                sql = "UPDATE ids SET num = {} WHERE id = {}".format(newNum,itemSelectedComponant[0].strip())
                mycursor.execute(sql)
                mydb.commit()
                mydb.reconnect()
    
                print(mycursor.rowcount, "record(s) affected")
                #نقوم بعمل عمليه البحث مره اخره لنحدث الحدول بالبيانات الجديده
                if isPhone:
                    self.Search_Product()
                else:
                    self.Search_Accessories()
                
                
                if not self.listWidget_2.count():
                    print("clear")
                    self.label_Rec_Id.setText("Receipt ID")
                    self.listWidget_2.clear()
                    self.label_Rec_Total.setText("0")
                    self.label_Rec_Total_2.setText("0")
                    self.dateTimeEdit.setReadOnly(False)
                    global editTime
                    editTime = 1
                    
    def Done(self):
        self.openWindowDone()
        
        
        
        with open('Message.dat', 'r+') as f:
            x = f.read()

        x = x.split("\n")
        con = x[0].split(" : ")[1]
        name = x[1].split(" : ")[1].lower()
        phone = x[2].split(" : ")[1]
        recetId = self.label_Rec_Id.text()
        prodId = ""
        num = 0
        time = str(self.dateTimeEdit.dateTime())[23:][:-1]
        timeData = time.split(", ")
        dateTime = timeData[0] + "-" + "{:02d}".format(int(timeData[1])) + "-" + "{:02d}".format(int(timeData[2])) + " " + "{:02d}".format(int(timeData[3])) + ":" + "{:02d}".format(int(timeData[4]))
        
        if con == "ok":
            with open('Receipt.txt', 'w') as f:
                x = f.write("Date and Time : {}".format(dateTime) + "\n")
                x = f.write("Receipt ID : {}".format(recetId) + "\n")
                x = f.write("Welcome : {}".format(name) + "\n")
                x = f.write("Phone : {}".format(phone) + "\n")
                for i in range(self.listWidget_2.count()):
                    itemSelected = self.listWidget_2.item(i).text()
                    itemSelectedComponant = itemSelected.split(" | ")
                    recCon = []
                    for i in itemSelectedComponant:
                        recCon.append(i.strip())
                    
                    recCon[1] = " ".join(recCon[1:3])
                    recCon.pop(2)
                    if recCon[-2] == "Used":
                        recCon[2] = recCon[2] + "%"
                    if not len(recCon) == 5:
                        recCon[-4] = recCon[-4] + "GB"
                        recCon[-5] = recCon[-5] + "GB"
                    x = f.write("\n" + " | ".join(recCon)+"\n")
                    prodId = itemSelectedComponant[0].strip()
                    PriceAndNum = itemSelectedComponant[-1].split("   x   ")
                    
                    mydb.reconnect()
                    mycursor = mydb.cursor()
                    sql = "SELECT price_in FROM mobile_devices WHERE serial_id = '{}'".format(itemSelectedComponant[0].strip())
                    mycursor.execute(sql)
                    myresult = mycursor.fetchall()
                    mydb.reconnect()
                    print(myresult)
                    if myresult:
                        priceIn = int(myresult[0][0])
                    else:
                        mydb.reconnect()
                        mycursor = mydb.cursor()
                        sql = "SELECT price_in FROM accessories WHERE acc_id = '{}'".format(itemSelectedComponant[0].strip())
                        mycursor.execute(sql)
                        myresult = mycursor.fetchall()
                        mydb.reconnect()
                        print(myresult)
                        priceIn = int(myresult[0][0])
                    
                    if len(PriceAndNum) == 1 :
                        num = 1
                        price = int(PriceAndNum[0]) - priceIn
                    else:
                        num = int(PriceAndNum[1])
                        price = int(PriceAndNum[0]) - priceIn
                    mydb.reconnect()
                    mycursor = mydb.cursor()
    
                    sql = "INSERT INTO receipt (rec_id, pro_id, cos_name, cos_num, price_in, profit, num, release_date) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)"
                    val = (int(recetId), prodId, name, phone, priceIn, price, num, dateTime)
                    mycursor.execute(sql, val)
                    mydb.commit()
                    mydb.reconnect()
    
                    print(mycursor.rowcount, "record inserted.")
                    
                x = f.write("\n \nTotal : {}".format(self.label_Rec_Total.text()) + "\n")
                x = f.write("\n \nSee You Sooon")
            if self.listWidget_2.count():
                os.startfile('Receipt.txt', "print")
            print("Done")
            self.label_Rec_Id.setText("Receipt ID")
            self.listWidget.clear()
            self.listWidget_2.clear()
            self.label_Rec_Total.setText("0")
            self.label_Rec_Total_2.setText("0")
            self.dateTimeEdit.setReadOnly(False)
            global editTime
            editTime = 1
            

        













